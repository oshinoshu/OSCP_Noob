OSCP_Noob_Journey

For all types of shell :- 

https://gtfobins.github.io/

https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet

https://www.hackingarticles.in/linux-privilege-escalation-automated-script/

https://learning.shareappscrack.com/course/linux-privilege-escalation-for-beginners    (free videos on linux privilege escalation by the youtuber @thecybermentor)

-------------------=======================TOOLS=========================-------------------------------------------

https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md

https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/

https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist

https://github.com/TCM-Course-Resources/Linux-Privilege-Escalation-Resources

https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html

https://github.com/mzet-/linux-exploit-suggester

https://github.com/rebootuser/LinEnum

https://github.com/sleventyeleven/linuxprivchecker

https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS

https://resources.infosecinstitute.com/topic/what-is-enumeration/

=============================---------_THM_--------===================
https://tryhackme.com/p/TheCyb3rW0lf
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Question:-  So how do we find SUID files on our target?
#Answers:-   find / -perm /4000 2>&1 | grep -v “Permission denied”

find /: calls the built-in find utility and starts looking at the root “/” directory

-perm: Any  of the permission bits are set for the file

/4000: the numerical value for files that have the SUID bit

2>&1 |: This instruction allows you to tell the shell to make one stream got to the same destination as another stream. 
In this case, we’re saying “redirect stream 2, stderr, to the same destination that stream 1, stdout, is being redirected to. 
We then pipe that output into the next command.

grep -v “Permission denied”: use grep to filter the output with the “-v” flag which Inverts the sense of matching to select non-matching lines. 
Basically “show me everything BUT lines that contain Permission denied”.

Referer:- https://unicornsec.com/home/tryhackme-vulnversity

Technique 1: Python

The first technique we'll be discussing is applicable only to Linux boxes, as they will nearly always have Python installed by default. 
This is a three stage process:

The first thing to do is use python -c 'import pty;pty.spawn("/bin/bash")', which uses Python to spawn a better featured bash shell; 
note that some targets may need the version of Python specified. If this is the case, replace python with python2 or python3 as required. 
At this point our shell will look a bit prettier, but we still won't be able to use tab autocomplete or the arrow keys, and Ctrl + C will still kill the shell.
Step two is: export TERM=xterm -- this will give us access to term commands such as clear.
Finally (and most importantly) we will background the shell using Ctrl + Z. Back in our own terminal we use stty raw -echo; fg. 
This does two things: first, it turns off our own terminal echo (which gives us access to tab autocompletes, the arrow keys, and Ctrl + C to kill processes). 
It then foregrounds the shell, thus completing the process.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Privilege Escalation SSH keys (finding command to exploit ssh)

find / -name authorized_keys 2> /dev/null

find / -name id_rsa 2> /dev/null


------======---------------=============-
TIPS:- 

Non root to root access

1. Systemd (We talked about ping and why it normally has the SUID bit enabled but do you see /bin/systemctl in the output?)
Our target system allows any logged in user to create a system service and run it as root!

Referer:- https://unicornsec.com/home/tryhackme-vulnversity

------------------------====================-----------------------------------------------===========------------------------
Enumeration classification

Enumeration can be performed on the following.

NetBios enumeration
SNMP enumeration
LDAP enumeration
NTP enumeration
SMTP enumeration
DNS enumeration
Windows enumeration
UNIX/Linux enumeration

References:- https://resources.infosecinstitute.com/topic/what-is-enumeration/

------------------------------------------===================================-----------------------------------------------------


Enumerating NFS:-

cd /tmp

showmount -e ipaddress. [export list for eg :- /opt/conf* ]

eg1 --> sudo mount -t nfs IP:/opt/conf /tmp/mnt                                       eg2 --> sudo mount -t nfs IP:share /tmp/mount/ -nolock

Let's break this down

Tag	   Function
sudo	   Run as root
mount      Execute the mount command
-t nfs	   Type of device to mount, then specifying that it's NFS
IP:share   The IP Address of the NFS server, and the name of the share we wish to mount
-nolock	   Specifies not to use NLM locking

NFS :- What is root_squash?

By default, on NFS shares- Root Squashing is enabled, and prevents anyone connecting to the NFS share from having root access to the NFS volume. 
Remote root users are assigned a user “nfsnobody” when connected, which has the least local privileges. Not what we want. 
However, if this is turned off, it can allow the creation of SUID bit files, allowing a remote user root access to the connected system.


NFS Access ->

        Gain Low Privilege Shell ->

            Upload Bash Executable to the NFS share ->

                Set SUID Permissions Through NFS Due To Misconfigured Root Squash ->

                    Login through SSH ->

                        Execute SUID Bit Bash Executable ->

                            ROOT ACCESS
-------------------------------------=============----------------

SMB ENUMERATION - 138 | 445                     RPC - 111

smbclient -L \\\\IP\\ -N            [the -L flag to list available shares and -N flag for a No Password login]
--------------------------
enum4linux -a IP
--------------------------------------------
nfs --> showmount -e IP [{for eg} /opt/conf]

mount -t nfs $ip:/opt/conf conf 
--------------------------------

References :- https://highon.coffee/blog/enum4linux-cheat-sheet/

https://cyberrat.medium.com/vulnnet-internal-tryhackeme-cad6ccb9ad54



















